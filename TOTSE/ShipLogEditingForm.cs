using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace SOSSE
{
    public partial class ShipLogEditingForm : Form
    {
        private const int vendorOffset = 0x47C28;
        private const int itemQuantityOffset = 0x47E04;
        private const int objectQuantityOffset = 0x49C94;
        private const int itemPriceOffset = 0x4AD88;
        private const int objectPriceOffset = 0x4CC18;
        private int currentCategory;

        public bool DataLoaded { get; private set; }
        public static string[] ItemObjectCategory;
        #region public static int[] ItemBasePrice
        public static int[] ItemBasePrice = { 150, 1050, 2550, 13050, 24550,
            37050, 43250, 46500, 150, 1050, 2550, 13050, 24550, 37050, 43250,
            46500, 150, 1050, 14350, 30350, 46500, 150, 1050, 14350, 30350,
            46500, 150, 1050, 14350, 30350, 46500, 150, 1050, 14350, 30350,
            46500, 150, 1050, 14350, 30350, 46500, 150, 1050, 14350, 30350,
            46500, 2500, 820, 7000, 250, 720, 250, 10, 120, 1050, 750, 150, 350,
            550, 1050, 75000, 500, 100, 1, 1, 1, 1, 1, 80, 360, 110, 495, 190,
            870, 130, 575, 160, 740, 80, 360, 140, 630, 80, 360, 80, 360, 285,
            1280, 210, 960, 350, 1575, 350, 1575, 110, 495, 165, 740, 100, 440,
            120, 540, 60, 270, 130, 575, 240, 1080, 70, 330, 190, 870, 150, 665,
            165, 90, 190, 165, 165, 150, 150, 190, 120, 100, 190, 160, 150, 110,
            910, 160, 60, 50, 75, 100, 125, 150, 150, 65, 160, 250, 240, 250,
            90, 210, 250, 190, 195, 390, 375, 370, 315, 100, 65, 10, 150, 150,
            150, 120, 100, 140, 140, 100, 30, 15, 1, 1, 1, 1, 1, 1, 1, 1, 75,
            375, 115, 575, 225, 1125, 55, 275, 375, 1875, 105, 525, 210, 1050,
            50, 250, 100, 500, 200, 1000, 690, 3450, 1000, 5000, 1100, 5500,
            120, 600, 220, 1100, 115, 575, 65, 325, 50, 250, 60, 300, 500, 2500,
            75, 375, 200, 1000, 80, 400, 220, 125, 230, 350, 250, 200, 205, 380,
            370, 130, 350, 220, 300, 220, 1260, 350, 300, 210, 270, 300, 900,
            210, 350, 100, 80, 160, 300, 150, 130, 165, 400, 160, 400, 340, 350,
            200, 60, 65, 55, 235, 165, 1, 100, 75, 150, 150, 120, 25, 200, 600,
            400, 1200, 500, 1500, 500, 1500, 800, 2400, 900, 2700, 1500, 4500,
            2000, 6000, 2300, 6900, 1000, 3000, 1100, 3300, 2500, 7500, 120,
            200, 300, 360, 600, 900, 260, 390, 1500, 800, 1300, 1, 1, 1, 1, 1,
            90, 135, 70, 115, 225, 65, 215, 205, 65, 90, 190, 235, 370, 600,
            350, 320, 2600, 1550, 700, 220, 1100, 895, 1110, 155, 450, 820,
            1230, 2000, 1100, 315, 360, 190, 1, 1, 1, 1, 1, 90, 115, 100, 70,
            215, 135, 130, 170, 230, 650, 200, 210, 100, 650, 780, 450, 550,
            400, 230, 1040, 300, 1030, 400, 500, 180, 850, 650, 570, 860, 840,
            250, 870, 210, 1500, 170, 3970, 4140, 1, 1, 1, 1, 1, 150, 230, 90,
            230, 160, 90, 750, 150, 300, 130, 100, 370, 650, 1100, 630, 750,
            740, 750, 830, 800, 590, 520, 650, 750, 620, 820, 680, 850, 720,
            800, 3350, 1, 1, 1, 1, 1, 100, 110, 260, 250, 90, 230, 150, 80, 90,
            95, 380, 320, 500, 420, 150, 670, 650, 580, 480, 270, 270, 760, 550,
            460, 780, 720, 520, 630, 480, 920, 1020, 1790, 510, 550, 800, 1870,
            580, 670, 1520, 2210, 2500, 2430, 1530, 1150, 1, 1, 1, 1, 1, 1270,
            350, 480, 990, 650, 610, 1240, 620, 990, 410, 790, 600, 410, 425,
            460, 840, 920, 1250, 850, 900, 570, 1170, 1170, 1000, 930, 920, 500,
            1100, 770, 3800, 1500, 1500, 1400, 1650, 1, 1, 1, 1, 1, 310, 420,
            510, 350, 370, 500, 550, 570, 610, 690, 1300, 720, 550, 560, 620,
            530, 360, 510, 880, 360, 350, 590, 650, 420, 510, 560, 560, 950,
            950, 360, 420, 850, 780, 590, 410, 1190, 1000, 1000, 1, 1, 1, 1, 1,
            360, 720, 1420, 310, 1290, 700, 530, 400, 420, 440, 520, 360, 560,
            370, 400, 420, 560, 520, 650, 510, 630, 1230, 780, 900, 700, 1000,
            1160, 1000, 1350, 720, 650, 630, 730, 620, 470, 1400, 720, 650, 300,
            380, 630, 930, 730, 900, 100, 100, 780, 570, 300, 470, 450, 870,
            560, 850, 710, 1200, 750, 1750, 470, 350, 580, 850, 1260, 410, 670,
            350, 360, 430, 560, 390, 420, 670, 460, 1370, 330, 510, 260, 510,
            570, 320, 360, 360, 540, 810, 570, 1, 1, 1, 1, 1, 90, 130, 700,
            1020, 180, 180, 320, 180, 220, 1130, 420, 360, 210, 420, 270, 270,
            470, 380, 570, 440, 940, 350, 450, 150, 170, 200, 130, 360, 250,
            150, 280, 280, 285, 275, 150, 155, 145, 350, 430, 750, 1060, 220,
            150, 160, 220, 380, 190, 230, 270, 1170, 490, 470, 320, 340, 840,
            590, 1020, 1, 1, 1, 1, 1, 250, 650, 700, 1300, 800, 1600, 1000,
            1800, 2200, 300, 700, 800, 1400, 900, 1700, 200, 600, 400, 1200,
            500, 1500, 250, 800, 550, 1400, 700, 1800, 950, 1500, 1350, 2200,
            1400, 2500, 300, 800, 550, 1400, 700, 1800, 400, 900, 650, 1500,
            800, 1900, 170, 400, 250, 600, 350, 1000, 200, 430, 280, 630, 380,
            1030, 1, 1, 1, 1, 1, 300, 400, 300, 180, 500, 300, 300, 210, 210,
            400, 100, 500, 670, 990, 1800, 460, 380, 400, 460, 600, 430, 460,
            700, 500, 350, 500, 550, 400, 600, 1, 1, 1, 1, 1, 250, 375, 300,
            425, 500, 685, 375, 500, 450, 575, 450, 575, 375, 500, 450, 575,
            500, 625, 375, 250, 1, 1, 1, 1, 1, 500, 500, 500, 500, 500, 500,
            1250, 1250, 2500, 2500, 750, 750, 750, 750, 750, 750, 1500, 1500,
            2750, 2750, 600, 600, 600, 600, 600, 600, 1350, 1350, 2600, 2600,
            850, 850, 850, 850, 850, 850, 1600, 1600, 2850, 2850, 1000, 1000,
            1375, 1375, 750, 750, 750, 750, 750, 750, 1500, 1500, 2750, 2750,
            1000, 1000, 1000, 1000, 1000, 1000, 1750, 1750, 3000, 3000, 900,
            1150, 900, 1000, 1000, 1150, 1250, 1250, 750, 750, 750, 750, 750,
            750, 1500, 1500, 2750, 2750, 1000, 1000, 1000, 1000, 1000, 1000,
            1750, 1750, 3000, 3000, 900, 1150, 1000, 1000, 1250, 1250, 750, 750,
            750, 750, 750, 750, 1000, 1000, 1500, 1500, 500, 500, 500, 500, 500,
            500, 750, 750, 1250, 1250, 1, 1, 1, 1, 1, 1000, 1000, 1000, 1000,
            1000, 1000, 2500, 2500, 4000, 4000, 2100, 2100, 2100, 2100, 2100,
            2100, 3500, 3500, 5500, 5500, 1200, 1200, 1200, 1200, 1200, 1200,
            2700, 2700, 4200, 4200, 3200, 3200, 3200, 3200, 3200, 3200, 4200,
            4200, 5900, 5900, 4400, 4400, 6300, 6300, 2100, 2100, 2100, 2100,
            2100, 2100, 3500, 3500, 5500, 5500, 5200, 5200, 5200, 5200, 5200,
            5200, 6600, 6600, 8700, 8700, 4200, 8300, 4400, 6400, 6400, 9200,
            10600, 10600, 1500, 1500, 1500, 1500, 1500, 1500, 3000, 3000, 4500,
            4500, 4000, 4000, 4000, 4000, 4000, 4000, 5000, 5000, 6700, 6700,
            1800, 4500, 7200, 7200, 13000, 13000, 1500, 1500, 1500, 1500, 1500,
            1500, 2000, 2000, 3000, 3000, 1000, 1000, 1000, 1000, 1000, 1000,
            1500, 1500, 2500, 2500, 1, 1, 1, 1, 1, 200, 200, 200, 200, 200, 350,
            350, 350, 350, 350, 500, 500, 500, 500, 500, 550, 550, 550, 550,
            550, 900, 1050, 1, 1, 1, 1, 1, 400, 400, 400, 400, 400, 700, 700,
            700, 700, 700, 1000, 1000, 1000, 1000, 1000, 1100, 1100, 1100, 1100,
            1100, 1800, 2100, 1, 1, 1, 1, 1, 800, 800, 800, 800, 800, 1400,
            1400, 1400, 1400, 1400, 2000, 2000, 2000, 2000, 2000, 2200, 2200,
            2200, 2200, 2200, 3600, 4200, 1, 1, 1, 1, 1, 625, 625, 625, 625,
            625, 625, 625, 625, 625, 625, 1250, 1250, 1250, 1250, 1250, 1250,
            1250, 1250, 1250, 1250, 1, 1, 1, 1, 1, 75, 225, 95, 245, 165, 310,
            120, 260, 95, 245, 90, 240, 125, 285, 90, 245, 115, 265, 210, 335,
            160, 300, 750, 1025, 385, 570, 95, 255, 105, 275, 100, 245, 110,
            300, 80, 215, 115, 265, 225, 345, 100, 230, 170, 335, 130, 265, 145,
            110, 160, 115, 155, 125, 120, 100, 90, 90, 170, 140, 125, 100, 750,
            75, 85, 60, 85, 115, 125, 90, 105, 85, 140, 160, 185, 115, 155, 165,
            135, 160, 195, 165, 130, 275, 175, 90, 70, 1, 105, 90, 110, 140, 95,
            15, 1, 1, 1, 1, 1, 6000, 6000, 7500, 4500, 7500, 6000, 10470, 10450,
            6000, 4500, 7500, 6000, 6000, 6000, 6300, 9960, 6500, 8000, 9000,
            7500, 6500, 8000, 5400, 3900, 5980, 7320, 5500, 5800, 7500, 8500,
            5130, 12040, 5450, 5300, 7000, 8500, 6620, 6000, 6000, 6320, 7980,
            8250, 6230, 7820, 6500, 6500, 1, 1, 1, 1, 1, 6500, 5700, 9170, 6000,
            8000, 9880, 9500, 11200, 7000, 7000, 8500, 8450, 5000, 9500, 5720,
            7690, 8450, 6075, 13320, 8500, 12700, 6500, 22000, 7000, 7000, 8500,
            10720, 7000, 6880, 8330, 10330, 20500, 11800, 15600, 20900, 16550,
            15000, 17000, 11500, 12100, 11800, 15770, 10620, 6130, 1, 1, 1, 1,
            1, 4400, 6100, 6600, 4400, 5900, 6500, 7600, 10400, 5700, 5900,
            10600, 6730, 9200, 6420, 8100, 6100, 6100, 7400, 7600, 13350, 6400,
            4400, 6400, 7600, 7100, 7100, 8400, 5900, 7100, 9900, 5600, 7880,
            9100, 5900, 7600, 8600, 10930, 7430, 1, 1, 1, 1, 1, 6010, 6010,
            12200, 16800, 5500, 5500, 16810, 16810, 17810, 16810, 16810, 9950,
            9000, 9000, 5500, 5000, 4500, 4500, 7500, 11000, 10500, 10500,
            14500, 16100, 16850, 17350, 17350, 13750, 42110, 550, 550, 550, 550,
            1, 3500, 4510, 6500, 3500, 3500, 3500, 6500, 6500, 9950, 6950, 6830,
            6800, 7000, 3500, 2800, 2870, 6000, 6000, 6000, 6000, 4950, 4800,
            4830, 5300, 6800, 8100, 9000, 6000, 13100, 13000, 11500, 13000,
            4800, 6500, 6900, 17000, 4500, 7150, 7080, 7200, 14400, 27000, 1, 1,
            1, 1, 1, 8200, 11900, 8200, 8200, 8200, 8200, 8200, 8200, 8200,
            11900, 8400, 8200, 8200, 8200, 8200, 6400, 8400, 8200, 5200, 9500,
            5500, 6700, 16500, 1, 1, 1, 1, 1, 9200, 9200, 9200, 9200, 9500,
            10000, 9200, 9200, 9200, 9200, 9200, 9500, 10000, 9200, 9200, 14500,
            9700, 9700, 9700, 9700, 10000, 10500, 9700, 9000, 9000, 9000, 9000,
            9000, 7200, 9000, 12400, 12400, 11900, 11900, 12700, 13700, 12700,
            6500, 6500, 6500, 6500, 7300, 8800, 7000, 1, 1, 1, 1, 1, 25, 50, 25,
            55, 120, 210, 200, 70, 90, 25, 25, 120, 20, 150, 25, 25, 50, 25,
            220, 25, 100, 25, 500, 700, 280, 300, 200, 220, 210, 230, 200, 100,
            250, 300, 600, 300, 300, 500, 900, 330, 310, 340, 200, 900, 300,
            1300, 210, 680, 1000, 260, 1500, 700, 300, 780, 300, 50, 20, 90, 80,
            30, 150, 650, 500, 220, 20, 30, 1890, 1350, 1520, 1780, 700, 2470,
            1500, 350, 400, 920, 1600, 3150, 1000, 800, 1, 1, 1, 1, 1, 20, 20,
            40, 30, 30, 100, 250, 500, 350, 150, 400, 40, 320, 250, 300, 440,
            60, 180, 600, 40, 60, 50, 400, 1000, 20, 30, 50, 40, 60, 100, 60,
            100, 200, 400, 1000, 2000, 20, 30, 20, 30, 100, 30, 40, 300, 400,
            350, 330, 40, 80, 20, 50, 30, 30, 20, 100, 550, 30, 50, 50, 40, 60,
            100, 20, 30, 50, 60, 100, 40, 30, 50, 400, 380, 500, 20, 20, 200,
            30, 40, 200, 60, 160, 40, 20, 30, 100, 150, 20, 50, 120, 230, 100,
            260, 20, 30, 60, 50, 100, 180, 1, 1, 1, 1, 500, 220, 180, 1000, 225,
            210, 165, 170, 50, 30, 30, 70, 200, 200, 215, 150, 185, 110, 250,
            50, 75, 50, 50, 50, 50, 320, 500, 10, 10, 10, 10, 10, 10, 10, 10,
            10, 25, 25, 25, 25, 10, 30, 30, 30, 30, 600, 600, 1570, 120, 810,
            1150, 1300, 1630, 1190, 1150, 10, 10, 10, 10, 10, 3360, 3740, 3400,
            7020, 3230, 4040, 7390, 900, 5, 50, 200, 500, 500, 500, 100, 5, 50,
            200, 10, 100, 400, 10, 100, 400, 15, 500, 4500, 5000, 10, 50, 200,
            300, 3700, 3700, 4000, 3700, 4500, 10000, 3700, 3700, 3700, 3700,
            3700, 3700, 3200, 3200, 3200, 5500, 15000, 1200, 3000, 3000, 3000,
            3000, 3000, 1, 100, 150, 500, 500, 4000, 1, 30, 30, 60, 150, 300,
            450, 300, 320, 330, 450, 480, 500, 5, 50, 550, 60, 150, 200, 20, 20,
            20, 75, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1 };
        #endregion
        #region public static int[] ObjectBasePrice
        public static int[] ObjectBasePrice = { 100, 650, 500, 100, 650, 500,
            700, 1600, 900, 1360, 8520, 2500, 1810, 8520, 3400, 4540, 8520,
            8560, 1210, 3120, 2400, 1120, 8520, 2220, 850, 8520, 1680, 1600,
            3520, 3180, 1660, 7520, 3300, 9560, 14120, 28000, 15560, 11120,
            31000, 1390, 2450, 1530, 3400, 6700, 5000, 2000, 2600, 850, 1080,
            850, 1080, 2000, 3000, 1000, 1000, 9560, 9560, 9560, 9560, 9560,
            9560, 4560, 8560, 12160, 11160, 530, 760, 2600, 3220, 2400, 10, 600,
            15500, 15500, 6200, 330, 3900, 2800, 2600, 5000, 350, 450, 2200,
            660, 660, 410, 2200, 5000, 8500, 8500, 1350, 2600, 3800, 260, 3300,
            3900, 3900, 8400, 10800, 3900, 3900, 6900, 350, 160, 170, 960,
            17050, 31200, 31200, 5740, 17300, 355, 1950, 18900, 240, 360, 2200,
            655, 1100, 7000, 26500, 390, 3800, 6400, 17300, 4000, 25700, 1640,
            19600, 2420, 2420, 10600, 21400, 1320, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1320, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 800, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1210, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            10300, 950, 150, 675, 750, 850, 850, 850, 1175, 1175, 660, 620, 700,
            1360, 1420, 1660, 1750, 1750, 1750, 19900, 19900, 19900, 19900,
            19900, 19900, 8200, 18200, 24700, 27200, 21000, 21000, 21000, 21000,
            21000, 21000, 8500, 18500, 25000, 27500, 20200, 20200, 20200, 20200,
            20200, 20200, 7700, 17700, 24200, 26700, 23000, 23000, 23000, 23000,
            23000, 23000, 10500, 20500, 27000, 29500, 20200, 20200, 20200,
            20200, 20200, 20200, 7700, 17700, 24200, 26700, 21000, 21000, 21000,
            21000, 21000, 21000, 8500, 18500, 25000, 27500, 12500, 16650, 33000,
            24000, 24200, 24300, 106500, 4800, 37000, 30650, 6400, 3200, 10200,
            7250, 1780, 5700, 9200, 19500, 38200, 38200, 265000, 81000, 15580,
            1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 48900, 38000, 29000,
            21640, 68350, 24500, 2780, 2400, 2820, 3300, 2900, 2700, 2720, 3420,
            3380, 2420, 3300, 2780, 3100, 2780, 3100, 3300, 4720, 4150, 4780,
            5500, 4900, 4600, 4630, 5680, 5620, 4180, 5500, 4720, 5200, 4720,
            10960, 5500, 3500, 4370, 4300, 4300, 3580, 2450, 4600, 3190, 2975,
            3300, 1900, 4750, 520, 420, 1500, 1890, 2030, 16960, 16780, 22100,
            18600, 9800, 1290, 5700, 5700, 0, 0, 0, 0, 5700, 0, 0, 0, 0, 5120,
            16650, 15150, 14250, 14150, 17100, 18700, 31100, 23150, 20060,
            65000, 31100, 21500, 1600, 3700, 1300, 240, 70000, 1800, 2250, 50,
            600, 30, 300, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100,
            4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100,
            4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100,
            4100, 4100, 4100, 4100, 4100, 340, 340, 340, 340, 340, 340, 340,
            340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 4000, 4000,
            4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,
            4000, 4000, 4000, 4000, 4000, 1730, 1730, 1730, 1730, 1730, 1730,
            1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,
            1730, 7700, 7700, 7700, 7700, 7700, 7700, 10200, 10200, 10200,
            10200, 10200, 10200, 4580, 10580, 10580, 20580, 4580, 4580, 5380,
            11380, 5380, 2080, 10500, 19500, 19500, 34500, 10500, 10500, 10500,
            19500, 10500, 3750, 800, 1460, 11660, 11660, 11660, 2060, 14060,
            15560, 3100, 23500, 23500, 23500, 4300, 28300, 31300, 1160, 11660,
            11660, 11660, 2060, 14060, 15560, 3600, 24000, 24000, 24000, 4800,
            28800, 31800, 1460, 11660, 11660, 11660, 2060, 14060, 15560, 3100,
            23500, 23500, 23500, 4300, 28300, 31300, 1460, 11660, 11660, 11660,
            2060, 14060, 15560, 3100, 23500, 23500, 23500, 4300, 28300, 31300,
            19100, 2035, 10150, 17400, 17800, 20200, 740, 740, 740, 740, 740,
            19175, 9300, 4870, 2950, 1050, 2930, 4250, 1060, 1360, 16100, 19300,
            570, 1570, 5200, 4310, 56800, 3590, 16100, 1240, 6100, 690, 8600,
            2200, 2800, 6440, 1920, 2920, 3000, 5400, 4180, 4810, 8680, 8680,
            1080, 4200, 14200, 290, 1000, 6300, 18700, 13800, 2400, 780, 11300,
            8050, 5050, 17800, 6950, 22300, 22580, 800, 4400, 800, 2600, 1105,
            1145, 12200, 13100, 10700, 12200, 4700, 3500, 1000, 3000, 1000,
            9500, 1315, 12400, 12400, 13300, 10900, 12400, 12400, 1900, 1120,
            18820, 2020, 5220, 1435, 12520, 12520, 13420, 11020, 12520, 12520,
            2020, 5260, 17900, 850, 5400, 650, 10100, 2100, 2850, 7400, 1750,
            3000, 3100, 7620, 26300, 1770, 880, 1170, 14300, 3100, 4150, 10520,
            2610, 4360, 4500, 1000, 5400, 4300, 4300, 880, 1480, 2680, 1960,
            2620, 2020, 3100, 2980, 880, 15880, 12280, 1780, 1630, 2130, 2980,
            2000, 12000, 9400, 2600, 2450, 365, 1040, 800, 2600, 63500, 27700,
            92000, 87400, 107500, 15050, 63650, 72800, 31440, 4200, 4200, 48400,
            49200, 54400, 73500, 12000, 185000, 70, 9700, 9500, 30300, 78000,
            3400, 27400, 30400, 800, 1600, 3600, 2000, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 4000, 13200, 7200, 57700, 32700, 4900, 14800, 11800, 36800,
            24300, 6300, 4550, 9300, 5800, 3800, 5300, 20800, 134000, 125000,
            51400, 102000, 107000, 56000, 162000, 49200, 1725, 1950, 1950, 1780,
            200, 1000, 1950, 3480, 3000, 2880, 3060, 4200, 2880, 2880, 4640,
            4160, 4040, 4220, 5360, 4040, 10590, 5850, 5790, 5880, 6450, 5790,
            17700, 8100, 11100, 11700, 10100, 11100, 11100, 11100, 12700, 14090,
            13850, 14315, 13880, 14450, 13790, 13790, 14600, 14300, 64200,
            21320, 11700, 57600, 10450, 17800, 13850, 13850, 13850, 24600,
            30200, 28100, 29000, 19150, 16300, 52800, 85100, 105800, 200, 1680,
            1680, 33250, 24850, 22450, 14350, 33250, 33250, 22450, 23900, 25680,
            27250, 8250, 23500, 24000, 96650, 34650, 35525, 36250, 35000, 36900,
            48850, 41750, 42000, 36000, 32000, 31000, 34500, 34500, 47000, 5000,
            5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 25700, 38800, 27745,
            37000, 23200, 19950, 34250, 15450, 15450, 52200, 59700, 50500,
            43200, 226500, 74350, 109200, 90200, 92300, 100, 100, 100, 100, 100,
            100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
            100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
            100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
            100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
            100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
            100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
            100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
            100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
            100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
            100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
            100, 100, 100, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0 };
        #endregion

        public ShipLogEditingForm()
        {
            this.Font = SystemFonts.MessageBoxFont;
            InitializeComponent();
            DataLoaded = false;
            Util.LoadItemNameList();
            Util.LoadObjectNameList();
            Util.LoadItemObjectCategory();

            foreach (var v in ItemObjectCategory)
                categoryComboBox.Items.Add(v);
            categoryComboBox.SelectedIndex = 0;
            // Implicitly call categoryComboBox_SelectedIndexChanged
            
            itemLogDataGridView.Rows.Add(Item.MaxItem);
            for (int i = 0; i < Item.MaxItem; i++)
            {
                var row = itemLogDataGridView.Rows[i];
                row.Cells[0].Value = Item.ItemNameList[i];
                row.Cells[1].Value =
                    BitConverter.ToInt32(MainForm.SaveData, itemQuantityOffset + 4 * i);
                row.Cells[2].Value =
                    BitConverter.ToInt32(MainForm.SaveData, itemPriceOffset + 4 * i);
            }
            
            objectLogDataGridView.Rows.Add(ObjectEditingForm.MaxRealObject);
            for (int i = 0; i < ObjectEditingForm.MaxRealObject; i++)
            {
                var row = objectLogDataGridView.Rows[i];
                row.Cells[0].Value = ObjectEditingForm.ObjectNameList[i];
                row.Cells[1].Value =
                    BitConverter.ToInt32(MainForm.SaveData, objectQuantityOffset + 4 * i);
                row.Cells[2].Value =
                    BitConverter.ToInt32(MainForm.SaveData, objectPriceOffset + 4 * i);
            }
            DataLoaded = true;
        }

        
        private void displayVendorData(int category)
        {
            DataLoaded = false;
            
            silkNumericUpDown.Value = BitConverter.ToInt32(MainForm.SaveData,
                vendorOffset + 4 * category);
            cabinNumericUpDown.Value = BitConverter.ToInt32(MainForm.SaveData,
                vendorOffset + 0x44 + 4 * category);
            sakuraNumericUpDown.Value = BitConverter.ToInt32(MainForm.SaveData,
                vendorOffset + 0x88 + 4 * category);
            wheatNumericUpDown.Value = BitConverter.ToInt32(MainForm.SaveData,
                vendorOffset + 0xCC + 4 * category);
            roseNumericUpDown.Value = BitConverter.ToInt32(MainForm.SaveData,
                vendorOffset + 0x110 + 4 * category);
            tropicalNumericUpDown.Value = BitConverter.ToInt32(MainForm.SaveData,
                vendorOffset + 0x154 + 4 * category);
            iceNumericUpDown.Value = BitConverter.ToInt32(MainForm.SaveData,
                vendorOffset + 0x198 + 4 * category);

            DataLoaded = true;
        }

        private void saveCurrentVendor()
        {
            Array.Copy(BitConverter.GetBytes((int)silkNumericUpDown.Value), 0,
                MainForm.SaveData, vendorOffset + 4 * currentCategory, 4);
            Array.Copy(BitConverter.GetBytes((int)cabinNumericUpDown.Value), 0,
                MainForm.SaveData, vendorOffset + 0x44 + 4 * currentCategory, 4);
            Array.Copy(BitConverter.GetBytes((int)sakuraNumericUpDown.Value), 0,
                MainForm.SaveData, vendorOffset + 0x88 + 4 * currentCategory, 4);
            Array.Copy(BitConverter.GetBytes((int)wheatNumericUpDown.Value), 0,
                MainForm.SaveData, vendorOffset + 0xCC + 4 * currentCategory, 4);
            Array.Copy(BitConverter.GetBytes((int)roseNumericUpDown.Value), 0,
                MainForm.SaveData, vendorOffset + 0x110 + 4 * currentCategory, 4);
            Array.Copy(BitConverter.GetBytes((int)tropicalNumericUpDown.Value), 0,
                MainForm.SaveData, vendorOffset + 0x154 + 4 * currentCategory, 4);
            Array.Copy(BitConverter.GetBytes((int)iceNumericUpDown.Value), 0,
                MainForm.SaveData, vendorOffset + 0x198 + 4 * currentCategory, 4);
        }

        private void categoryComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (DataLoaded) saveCurrentVendor();
            currentCategory = categoryComboBox.SelectedIndex;
            displayVendorData(currentCategory);
        }

        private void itemLogDataGridView_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {
            if (e.RowIndex == 0) return;
            var cell = itemLogDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex];
            int value;
            bool isValid = Int32.TryParse(e.FormattedValue.ToString(), out value);
            if (!isValid)
            {
                cell.ErrorText = "Invalid number";
                itemLogDataGridView.CancelEdit();
            }
            else
                cell.ErrorText = null;
        }

        private void objectLogDataGridView_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {
            if (e.RowIndex == 0) return;
            var cell = objectLogDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex];
            int value;
            bool isValid = Int32.TryParse(e.FormattedValue.ToString(), out value);
            if (!isValid)
            {
                cell.ErrorText = "Invalid number";
                objectLogDataGridView.CancelEdit();
            }
            else
                cell.ErrorText = null;
        }

        private void fillItemButton_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < Item.MaxItem; i++)
            {
                var row = itemLogDataGridView.Rows[i];
                int quantity = Int32.Parse(row.Cells[1].Value.ToString());
                if (quantity == 0)
                {
                    row.Cells[1].Value = 1;
                    row.Cells[2].Value = ItemBasePrice[i];
                }
            }
        }

        private void fillObjectButton_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < ObjectEditingForm.MaxRealObject; i++)
            {
                var row = objectLogDataGridView.Rows[i];
                int quantity = Int32.Parse(row.Cells[1].Value.ToString());
                if (quantity == 0)
                {
                    row.Cells[1].Value = 1;
                    row.Cells[2].Value = ObjectBasePrice[i];
                }
            }
        }

        // Calculate total item shipped in each category
        // The result should be equal to vendor data
        private int totalItem(byte category)
        {
            int total = 0;
            for (int i = 0; i < Item.MaxItem; i++)
            {
                if (Item.ItemCategory[i] == category)
                    total = total + BitConverter.ToInt32(MainForm.SaveData,
                        itemQuantityOffset + 4 * i);
            }
            return total;
        }

        // Test
        private void log()
        {
            List<string> lines = new List<string>();
            for (byte i = 0; i < 9; i++)
            {
                string line = ItemObjectCategory[i] + ": ";
                line += totalItem(i).ToString() + " ";
                long total = 0;
                for (int j = 0; j < 7; j++)
                    total += BitConverter.ToInt32(MainForm.SaveData, vendorOffset + 0x44 * j + 4 * i);
                line += total.ToString();
                lines.Add(line);
            }
            System.IO.File.WriteAllLines("ShipLog.txt", lines.ToArray());
        }

        /// <summary>
        /// Save edited ship log data to the main save file
        /// </summary>
        public void SaveShipLog()
        {
            saveCurrentVendor();

            bool isValid;
            int quantity, price;
            for (int i = 0; i < Item.MaxItem; i++)
            {
                isValid = Int32.TryParse(itemLogDataGridView.Rows[i].Cells[1]
                    .Value.ToString(), out quantity);
                isValid = Int32.TryParse(itemLogDataGridView.Rows[i].Cells[2]
                    .Value.ToString(), out price);
                Array.Copy(MainForm.SaveData, itemQuantityOffset,
                    BitConverter.GetBytes(quantity), 0, 4);
                Array.Copy(MainForm.SaveData, itemPriceOffset,
                    BitConverter.GetBytes(price), 0, 4);
            }
            for (int i = 0; i < ObjectEditingForm.MaxRealObject; i++)
            {
                isValid = Int32.TryParse(objectLogDataGridView.Rows[i].Cells[1]
                    .Value.ToString(), out quantity);
                isValid = Int32.TryParse(objectLogDataGridView.Rows[i].Cells[2]
                    .Value.ToString(), out price);
                Array.Copy(MainForm.SaveData, objectQuantityOffset,
                    BitConverter.GetBytes(quantity), 0, 4);
                Array.Copy(MainForm.SaveData, objectPriceOffset,
                    BitConverter.GetBytes(price), 0, 4);
            }
        }

        private void ShipLogEditingForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            SaveShipLog();
        }
    }
}
